# T√™n module v√† ch∆∞∆°ng tr√¨nh
obj-m += crypt_driver.o
USER_APP = main
DEVICE = cryptdev

# Th∆∞ m·ª•c kernel
KDIR := /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)

# ‚öôÔ∏è M·∫∑c ƒë·ªãnh: build c·∫£ driver v√† user app
all: modules $(USER_APP)

# Build ch∆∞∆°ng tr√¨nh ng∆∞·ªùi d√πng
$(USER_APP): main.c
	gcc -o $(USER_APP) main.c

# Build kernel module
modules:
	make -C $(KDIR) M=$(PWD) modules

# N·∫°p module + t·∫°o /dev + ph√¢n quy·ªÅn
load: modules
	@echo "üöÄ Loading kernel module..."
	-sudo insmod crypt_driver.ko || echo "‚ö†Ô∏è  C√≥ th·ªÉ module ƒë√£ ƒë∆∞·ª£c n·∫°p"
	@if [ ! -e /dev/$(DEVICE) ]; then \
		sudo mknod /dev/$(DEVICE) c $$(grep $(DEVICE) /proc/devices | awk '{print $$1}') 0; \
		echo "üì¶ ƒê√£ t·∫°o /dev/$(DEVICE)"; \
	fi
	sudo chmod 666 /dev/$(DEVICE)
	dmesg | tail -10

# G·ª° module + x√≥a /dev
unload:
	@echo "üßπ Removing kernel module..."
	-sudo rmmod crypt_driver
	-sudo rm -f /dev/$(DEVICE)

# Ch·∫°y ch∆∞∆°ng tr√¨nh ng∆∞·ªùi d√πng v·ªõi sudo
run: load
	sudo ./$(USER_APP)

# D·ªçn s·∫°ch t·∫•t c·∫£ file sinh ra
clean:
	@echo "üßº ƒêang d·ªçn s·∫°ch..."
	make -C $(KDIR) M=$(PWD) clean
	-sudo rm -f $(USER_APP)
	rm -f *.o *.ko *.mod.* *.symvers *.order Module.*
	-sudo rm -f /dev/$(DEVICE)
